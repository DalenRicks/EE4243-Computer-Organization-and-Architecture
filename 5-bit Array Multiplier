`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: The University of Texas at San Antonio 
// Engineer: Dalen Ricks
// 
// Create Date: 11/10/2023 01:15:12 PM
// Design Name: 5x5 Array Multiplier
// Module Name: Array_Multiplier
// Project Name: 5x5 Array Multiplier
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// All dependent modules have been included below the top module to improve readability
//////////////////////////////////////////////////////////////////////////////////


module Array_Multiplier(
    output[9:0] product,
    input [4:0] a, b
);
    //Partial Products
    wire [4:0] partial_products [4:0];

    part_prod G0(partial_products[0], a, b[0]);
    part_prod G1(partial_products[1], a, b[1]);
    part_prod G2(partial_products[2], a, b[2]);
    part_prod G3(partial_products[3], a, b[3]);
    part_prod G4(partial_products[4], a, b[4]);

    wire [3:0] VCarry [2:0];
    wire [4:0] HCarry [3:0];
    
    //Full Adders
    //Row 0
    assign product[0] = partial_products[0][0];
    full_add F00(product[1], HCarry[0][0], partial_products[0][1], partial_products[1][0], 0);
    full_add F01(VCarry[0][0], HCarry[0][1], partial_products[0][2], partial_products[1][1], 0);
    full_add F02(VCarry[0][1], HCarry[0][2], partial_products[0][3], partial_products[1][2], 0);
    full_add F03(VCarry[0][2], HCarry[0][3], partial_products[0][4], partial_products[1][3], 0);
    
    //Row 1
    full_add F10(product[2], HCarry[1][0], VCarry[0][0], partial_products[2][0], HCarry[0][0]);
    full_add F11(VCarry[1][0], HCarry[1][1], VCarry[0][1], partial_products[2][1], HCarry[0][1]);
    full_add F12(VCarry[1][1], HCarry[1][2], VCarry[0][2], partial_products[2][2], HCarry[0][2]);
    full_add F13(VCarry[1][2], HCarry[1][3], partial_products[1][4], partial_products[2][3], HCarry[0][3]);
    
    //Row 2
    full_add F20(product[3], HCarry[2][0], VCarry[1][0], partial_products[3][0], HCarry[1][0]);
    full_add F21(VCarry[2][0], HCarry[2][1], VCarry[1][1], partial_products[3][1], HCarry[1][1]);
    full_add F22(VCarry[2][1], HCarry[2][2], VCarry[1][2], partial_products[3][2], HCarry[1][2]);
    full_add F23(VCarry[2][2], HCarry[2][3], partial_products[2][4], partial_products[3][3], HCarry[1][3]);
    
    //Row 3
    full_add F30(product[4], HCarry[3][0], VCarry[2][0], partial_products[4][0], HCarry[2][0]);
    full_add F31(VCarry[3][0], HCarry[3][1], VCarry[2][1], partial_products[4][1], HCarry[2][1]);
    full_add F32(VCarry[3][1], HCarry[3][2], VCarry[2][2], partial_products[4][2], HCarry[2][2]);
    full_add F33(VCarry[3][2], HCarry[3][3], partial_products[3][4], partial_products[4][3], HCarry[2][3]);
    
    //Row 4
    full_add F40(product[5], HCarry[4][0], VCarry[3][0], 0, HCarry[3][0]);
    full_add F41(product[6], HCarry[4][1], VCarry[3][1], HCarry[3][1], HCarry[4][0]);
    full_add F42(product[7], HCarry[4][2], VCarry[3][2], HCarry[3][2], HCarry[4][1]);
    full_add F43(product[8], product[9], partial_products[4][4], HCarry[3][3], HCarry[4][2]);
    
endmodule

module part_prod(
    output [4:0] row,
    input [4:0] a,
    input b
);

    assign row[0] = a[0] && b;
    assign row[1] = a[1] && b;
    assign row[2] = a[2] && b;
    assign row[3] = a[3] && b;
    assign row[4] = a[4] && b;
endmodule

module full_add(
    output sum, cout,
    input a, b, cin
);

    assign sum = (a ^ b) ^ cin;
    assign cout = (cin && (a ^ b)) || (a && b);
endmodule
